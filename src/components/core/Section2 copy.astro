---
import type { PageSection } from "@/content/page.types";
import { markdownify } from "@/lib/utils/textConverter";
import { Image } from "astro:assets";
import Button from "../LinkButton.astro";

export type Section = PageSection;
export type Props = {
  section: Section;
};
const sliderImages = [
  "/images/nanosafe/Maquina01.png",
  "/images/nanosafe/Maquina02.png",
  "/images/nanosafe/Maquina03.png",
];


const { section } = Astro.props;
if (!section) {
  throw new Error("Section data is required");
}
const { title, buttons, image, content, image_position, nombre } = section;


const image_position_classes = (() => {
  if (!image && !image_position) {
    return ["", "col-12 ", ""];
  }

  if (image) {
    switch (image_position) {
      case "top":
        return ["flex-row-reverse ", "col-12 ", "col-12 mb-4 lg:mb-0 "];
      case "bottom":
        return ["", "col-12", "col-12"];
      case "left":
        return [

          "flex-row-reverse ",
          "col-12 md:col-7 lg:col-6 ",
          "col-12 md:col-5 lg:col-6",

        ];
      case "right":
      default:
        return ["", "col-12 md:col-7 lg:col-6 ", "col-12 md:col-5 lg:col-6 "];
    }
  } else {
    return ["", "col-12 ", ""];
  }
})();



const texto_modificado = nombre.replaceAll(" ", "#")
/* console.log("image_position_classes[2]",texto_modificado) */
---

<section id={texto_modificado} class=`${image_position ? 'bg-blue-200' : ''}  section relative`>
  <div class="container " >
    <div
      class=` row items-center flex-row-reverse `
    >
    <h1 class="mt-6" set:html={markdownify(title)} />
    {

      image && image_position != "top" && (

        <div class={`${image_position_classes[2]} `}>
{/* <!-- Contenedor del slider --> */}
      <div class=" flex flex-row justify-center item-center relative w-full   overflow-hidden ">
        <div id="slider" class="flex  transition-transform duration-500">
          {sliderImages.map((img, index) => (
            <Image
              class="object-contain mt-20  transition-transform duration-300  xl:mr-24 xl:ml-5  transform hover:scale-110"
              alt="slider-image"
              src={img}
              width={600}
              height={600}
            />
          ))}
        </div>

{/*         <!-- Botones de navegaci칩n --> */}
        <button id="prev" class="absolute left-0 bottom-4 transform -translate-y-1/2  p-1 "><h1>{`<-`}</h1></button>
        <button id="next" class="absolute right-0 bottom-4 transform -translate-y-1/2 p-1 "><h1>{`->`}</h1></button>

      </div>
        </div>
      )

    }
       {
        image && image_position != "top" && (
          <div class={`${image_position_classes[2]}`}>

             <p class="mt-6" set:html={markdownify(content)} />
             {
          buttons && buttons.length > 0 && (
            <div class="flex flex-wrap mt-8">
              {buttons.map((button) => (
                <Button {...button} />
              ))}
            </div>
          )
        }
          </div>


        )
      }



    </div>
  </div>
</section>


<!-- Script para control del slider -->
<script>
  const slider = document.getElementById('slider');
  const prev = document.getElementById('prev');
  const next = document.getElementById('next');

  let index = 0;
  const totalSlides = slider?.children.length || 0;

  function showSlide(newIndex) {
    if (!slider) return; //  Prevenci칩n si el elemento no existe
    index = (newIndex + totalSlides) % totalSlides;
    slider.style.transform = `translateX(-${index * 100}%)`;
  }

  if (slider && prev && next) { // Verificaci칩n antes de a침adir eventos
    prev.addEventListener('click', () => showSlide(index - 1));
    next.addEventListener('click', () => showSlide(index + 1));
  }
  </script>
